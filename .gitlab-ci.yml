stages:
  - pre-check
  - build
  - test

# These stanzas do some common management tasks before and after the
# job-specific before_script and after_script stanzas are run.
# before_script_start configures any default global state.  The
# job-specific before_script can override this state, if required.
# before_script_end prints out information about the environment to
# improve debugging; it does not modify the environment.
# after_script_end does some common management tasks after the
# job-specific after_script is run.  It prints information about the
# environment, and does some clean up.
#
# Add this to your stanza as follows:
#
#   before_script:
#     - *before_script_start
#     - *** YOUR CODE HERE ***
#     - *before_script_end
#   after_script:
#     - *** YOUR CODE HERE ***
#     - *after_script_end

.before_script_start: &before_script_start
  - 'if test "x${RUSTFLAGS+SET}" = xSET; then echo "\$RUSTFLAGS is set ($RUSTFLAGS)"; exit 1; fi'

.before_script_end: &before_script_end
  - 'if test "x${RUSTFLAGS+SET}" = xSET; then echo "WARNING: before_script set \$RUSTFLAGS ($RUSTFLAGS)"; fi'
  - rustc --version --verbose
  - cargo --version
  - clang -v
  - if [ -d $CARGO_TARGET_DIR ]; then find $CARGO_TARGET_DIR | wc --lines; du -sh $CARGO_TARGET_DIR; fi
  - if [ -d $CARGO_HOME ]; then find $CARGO_HOME | wc --lines; du -sh $CARGO_HOME; fi

.after_script_end: &after_script_end
  - if [ -d $CARGO_TARGET_DIR ]; then find $CARGO_TARGET_DIR -type f -atime +7 -delete; fi
  - if [ -d $CARGO_TARGET_DIR ]; then du -sh $CARGO_TARGET_DIR; fi
  - if [ -d $CARGO_HOME ]; then du -sh $CARGO_HOME; fi

before_script:
  - *before_script_start
  - *before_script_end

after_script:
  - *after_script_end

bookworm:
  tags:
    - linux
  stage: build
  interruptible: true
  image: 192.168.122.1:5000/sequoia-pgp/build-docker-image/bookworm-prebuild:latest
  script:
    - cargo test --manifest-path openpgp/Cargo.toml
  variables:
    CARGO_TARGET_DIR: /target
    CARGO_HOME: /cargo

bookworm-crypto-rust:
  tags:
    - linux
  stage: build
  interruptible: true
  image: 192.168.122.1:5000/sequoia-pgp/build-docker-image/bookworm-prebuild:latest
  dependencies:
    - codespell
  script:
    - cargo test --release --manifest-path openpgp/Cargo.toml --no-default-features --features crypto-rust,compression,allow-experimental-crypto,allow-variable-time-crypto
  variables:
    CARGO_TARGET_DIR: /target
    CARGO_HOME: /cargo

bookworm-crypto-openssl:
  tags:
    - linux
  stage: build
  interruptible: true
  image: 192.168.122.1:5000/sequoia-pgp/build-docker-image/bookworm-prebuild:latest
  dependencies:
    - codespell
  script:
    - cargo test --manifest-path openpgp/Cargo.toml --no-default-features --features crypto-openssl,compression
  variables:
    CARGO_TARGET_DIR: /target
    CARGO_HOME: /cargo

bookworm-crypto-botan:
  tags:
    - linux
  stage: build
  interruptible: true
  image: 192.168.122.1:5000/sequoia-pgp/build-docker-image/bookworm-prebuild:latest
  script:
    - cargo test --manifest-path openpgp/Cargo.toml --no-default-features --features crypto-botan,compression
  variables:
    CARGO_TARGET_DIR: /target
    CARGO_HOME: /cargo

codespell:
  tags:
    - linux
  stage: pre-check
  interruptible: true
  image: 192.168.122.1:5000/sequoia-pgp/build-docker-image/bookworm:latest

  before_script:
    - *before_script_start
    - codespell --version
    - *before_script_end
  script:
    - $MAKE_TOP codespell CODESPELL_FLAGS=--summary

clippy:
  tags:
    - linux
  stage: build
  interruptible: true
  image: 192.168.122.1:5000/sequoia-pgp/build-docker-image/rust-stable-prebuild:latest
  before_script:
    - *before_script_start
    - rustup default 1.60.0 # Pin clippy.
    - rustup component add clippy
    - cargo clippy --version
    - *before_script_end
  script:
    - cargo clippy
  variables:
    CARGO_TARGET_DIR: /target
    CARGO_HOME: /cargo

variables:
  DEBIAN_FRONTEND: noninteractive
  CARGO_HOME: $CI_PROJECT_DIR/../cargo
  CARGO_FLAGS: --color always
  CARGO_INCREMENTAL: 0
  RUST_BACKTRACE: full
  CFLAGS: -Werror
  MAKE_TOP: make --file=.Makefile
  QUICKCHECK_GENERATOR_SIZE: 500 # https://github.com/BurntSushi/quickcheck/pull/240
